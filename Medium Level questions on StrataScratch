Question 1: Cities With The Most Expensive Homes
https://platform.stratascratch.com/coding/10315-cities-with-the-most-expensive-homes?code_type=1

Descritpion: Write a query that identifies cities with higher than average home prices when compared to the national average. Output the city names.
DF name - zillow_transactions.
id: int64
state: object
city: object
street_address: object
mkt_price: int64

Using SQL:

select 
    city
from zillow_transactions

group by 
	city
having avg(mkt_price)  > (select 
														avg(mkt_price) 
													from 
														zillow_transactions t )

Using Python:

national_avg_price = zillow_transactions.mkt_price.mean()

zillow_transactions.groupby('city')\
                .agg({'mkt_price': 'mean'})\
                .query('mkt_price > @national_avg_price')\
                .reset_index()['city']

------------------------------------------------------
Question 2: Highest Energy Consumption
https://platform.stratascratch.com/coding/10064-highest-energy-consumption?code_type=1

Descritpion: Find the date with the highest total energy consumption from the Meta/Facebook data centers. O
utput the date along with the total energy consumption across all data centers.

Using SQL:

--РЕШЕНИЕ 1

--with all_data as(select * from fb_eu_energy fbe 
--#union all
--select * from fb_asia_energy fba 
--union all
--select * from fb_na_energy fbna )

--select t.date, sum(t.consumption) as sum from all_data t
--group by t.date order by sum desc
--limit 1


--РЕШЕНИЕ 2

--with all_data as (select * from fb_eu_energy fbe 
--union all
--select * from fb_asia_energy fba 
--union all
--select * from fb_na_energy fbna ),

--agg_sum as(
--select t.date, sum(t.consumption) as sum from all_data t
--group by t.date
--)
--select * from agg_sum t
--where t.sum = (select max(t.sum) from agg_sum t)



--Решение 3 

--with all_data as (select * from fb_eu_energy fbe 
--union all
--select * from fb_asia_energy fba 
--union all
--select * from fb_na_energy fbna )

--select t.*, rank()  over (sum(consumption)

--from all_data t

--Решение 4 

select date, total_consumption from ( select date, sum(consumption) as total_consumption, rank() over (order by sum(consumption) desc) as r   from 
(SELECT * FROM fb_eu_energy
UNION ALL
SELECT * FROM fb_asia_energy
UNION ALL
SELECT * FROM fb_na_energy) all_data
group by date) t
where r = 1

USING PYTHON

df = fb_eu_energy

df = pd.concat([fb_eu_energy,fb_asia_energy,fb_na_energy])

t = df.groupby('date').agg({'consumption':'sum'}).reset_index()

t[t['consumption'] == t['consumption'].max()]

------------------------------------------------------
Question 3: Finding User Purchases
https://platform.stratascratch.com/coding/10322-finding-user-purchases?code_type=1

Descritpion: Write a query that'll identify returning active users. A returning active user is a user 
that has made a second purchase within 7 days of any other of their purchases. 
Output a list of user_ids of these returning active users.

Using SQL:

Регение 1

SELECT distinct (a1.user_id)
FROM amazon_transactions a1
JOIN amazon_transactions a2 ON a1.user_id=a2.user_id
AND a1.id <> a2.id
AND a2.created_at::date-a1.created_at::date BETWEEN 0 AND 7
ORDER BY a1.user_id

Решение 2
select distinct (a.user_id)
from
    amazon_transactions a
join amazon_transactions b 
on a.user_id = b.user_id
where 1=1 and a.id != b.id and
    b.created_at >= a.created_at
    and
    b.created_at <= a.created_at + interval '7 day'
group by a.user_id

------------------------------------------------------
Question 4: Customers Without Orders
https://platform.stratascratch.com/coding/9896-customers-without-orders?code_type=1

Descritpion: Find customers who have never made an order.
Output the first name of the customer.

Using SQL:

Решение 1

select 
	first_name 
from 
	customers c
where c.id not in 
	(select 
		distinct o.cust_id 
	from 
		orders o );

Решение 2
select 
    c.first_name 
from 
    customers c
left join 
    orders o 
on 
    c.id = o.cust_id
where 
    o.cust_id is null












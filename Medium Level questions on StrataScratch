Question 1: Cities With The Most Expensive Homes
https://platform.stratascratch.com/coding/10315-cities-with-the-most-expensive-homes?code_type=1

Descritpion: Write a query that identifies cities with higher than average home prices when compared to the national average. Output the city names.
DF name - zillow_transactions.
id: int64
state: object
city: object
street_address: object
mkt_price: int64

Using SQL:

select 
    city
from zillow_transactions

group by 
	city
having avg(mkt_price)  > (select 
														avg(mkt_price) 
													from 
														zillow_transactions t )

Using Python:

national_avg_price = zillow_transactions.mkt_price.mean()

zillow_transactions.groupby('city')\
                .agg({'mkt_price': 'mean'})\
                .query('mkt_price > @national_avg_price')\
                .reset_index()['city']

------------------------------------------------------
Question 2: Highest Energy Consumption
https://platform.stratascratch.com/coding/10064-highest-energy-consumption?code_type=1

Descritpion: Find the date with the highest total energy consumption from the Meta/Facebook data centers. O
utput the date along with the total energy consumption across all data centers.

Using SQL:

--РЕШЕНИЕ 1

--with all_data as(select * from fb_eu_energy fbe 
--#union all
--select * from fb_asia_energy fba 
--union all
--select * from fb_na_energy fbna )

--select t.date, sum(t.consumption) as sum from all_data t
--group by t.date order by sum desc
--limit 1


--РЕШЕНИЕ 2

--with all_data as (select * from fb_eu_energy fbe 
--union all
--select * from fb_asia_energy fba 
--union all
--select * from fb_na_energy fbna ),

--agg_sum as(
--select t.date, sum(t.consumption) as sum from all_data t
--group by t.date
--)
--select * from agg_sum t
--where t.sum = (select max(t.sum) from agg_sum t)



--Решение 3 

--with all_data as (select * from fb_eu_energy fbe 
--union all
--select * from fb_asia_energy fba 
--union all
--select * from fb_na_energy fbna )

--select t.*, rank()  over (sum(consumption)

--from all_data t

--Решение 4 

select date, total_consumption from ( select date, sum(consumption) as total_consumption, rank() over (order by sum(consumption) desc) as r   from 
(SELECT * FROM fb_eu_energy
UNION ALL
SELECT * FROM fb_asia_energy
UNION ALL
SELECT * FROM fb_na_energy) all_data
group by date) t
where r = 1

USING PYTHON

df = fb_eu_energy

df = pd.concat([fb_eu_energy,fb_asia_energy,fb_na_energy])

t = df.groupby('date').agg({'consumption':'sum'}).reset_index()

t[t['consumption'] == t['consumption'].max()]

------------------------------------------------------
Question 3: Finding User Purchases
https://platform.stratascratch.com/coding/10322-finding-user-purchases?code_type=1

Descritpion: Write a query that'll identify returning active users. A returning active user is a user 
that has made a second purchase within 7 days of any other of their purchases. 
Output a list of user_ids of these returning active users.

Using SQL:

Регение 1

SELECT distinct (a1.user_id)
FROM amazon_transactions a1
JOIN amazon_transactions a2 ON a1.user_id=a2.user_id
AND a1.id <> a2.id
AND a2.created_at::date-a1.created_at::date BETWEEN 0 AND 7
ORDER BY a1.user_id

Решение 2
select distinct (a.user_id)
from
    amazon_transactions a
join amazon_transactions b 
on a.user_id = b.user_id
where 1=1 and a.id != b.id and
    b.created_at >= a.created_at
    and
    b.created_at <= a.created_at + interval '7 day'
group by a.user_id

------------------------------------------------------
Question 4: Customers Without Orders
https://platform.stratascratch.com/coding/9896-customers-without-orders?code_type=1

Descritpion: Find customers who have never made an order.
Output the first name of the customer.

Using SQL:

Решение 1

select 
	first_name 
from 
	customers c
where c.id not in 
	(select 
		distinct o.cust_id 
	from 
		orders o );

Решение 2
select 
    c.first_name 
from 
    customers c
left join 
    orders o 
on 
    c.id = o.cust_id
where 
    o.cust_id is null


------------------------------------------------------
Question 4: CTotal Cost Of Orders
https://platform.stratascratch.com/coding/10183-total-cost-of-orders?code_type=1

Descritpion: Find the total cost of each customer's orders. 
Output customer's id, first name, and the total order cost. 
Order records by customer's first name alphabetically.

Using SQL:

select 
    o.cust_id,
    c.first_name,    
    sum(o.total_order_cost) as total_cost
from 
    customers c
left join 
    orders o 
on 
    c.id = o.cust_id
group by 
    o.cust_id,
    c.first_name
having 
    sum(o.total_order_cost) is not null
order by c.first_name asc


------------------------------------------------------
Question 5: Unique Users Per Client Per Month
https://platform.stratascratch.com/coding/2024-unique-users-per-client-per-month?code_type=1

Descritpion: Write a query that returns the number of unique users per client per month

Using SQL:

select  
    extract(month from time_id) as month,
    t.client_id,
    count(distinct t.user_id)
from 
    fact_events t
group by
    t.client_id,
    extract(month from time_id)
order by t.client_id


------------------------------------------------------
Question 6: Risky Projects
https://platform.stratascratch.com/coding/10304-risky-projects?code_type=1

Descritpion: Identify projects that are at risk for going overbudget. 
A project is considered to be overbudget if the cost of all employees assigned to the project is greater than the budget of the project.
You'll need to prorate the cost of the employees to the duration of the project. For example, if the budget 
for a project that takes half a year to complete is $10K, then the total half-year salary of all employees assigned 
to the project should not exceed $10K. Salary is defined on a yearly basis, so be careful how to calculate salaries 
or the projects that last less or more than one year.
Output a list of projects that are overbudget with their project name, project budget, and prorated total employee expense 
(rounded to the next dollar amount).

Using SQL:

with all_data as (select 
    p.title,
    p.budget,
    p.id,
    p.start_date,
    p.end_date,
    (p.end_date-p.start_date)/365::float as project_duration
    
from linkedin_projects p),

project_yearly_salary as (
select 
    ep.project_id,
    sum(salary) as project_yearly_salary
from  
    linkedin_emp_projects ep
join
    linkedin_employees emp on ep.emp_id = emp.id
group by
    ep.project_id)

select 
    title,
    budget,
    ceiling(project_yearly_salary * project_duration) as project_expences

from 
    all_data a
join 
    project_yearly_salary p on a.id = p.project_id
where project_yearly_salary * project_duration>budget


------------------------------------------------------
Question 7: The Best Artist
https://platform.stratascratch.com/coding/9744-artist-of-the-decade?code_type=1

Descritpion: Find the number of times an artist has been on the billboard top 100 in the past 20 years. 
Output the result alongside the artist's name and order records based on the founded count in descending order.

Using SQL:

select 
    artist,
    count(*) as cnt
from 
    billboard_top_100_year_end t
where 
    date_part('year', CURRENT_DATE) - year <= 20
group by 
    t.artist
order by  
    count(*) desc 

------------------------------------------------------
Question 8: Highest Salary In Department (window function)
https://platform.stratascratch.com/coding/9897-highest-salary-in-department?code_type=1

Descritpion: Find the employee with the highest salary per department.
Output the department name, employee's first name along with the corresponding salary.

Using SQL:

with ranked_salaries as (select 
    department,
    first_name,
    salary,
    rank() over (partition by department order by salary desc) as rnk
from employee)

select 
    * 
from 
    ranked_salaries
where 
    rnk = 1

------------------------------------------------------
Question 9: Churn Rate Of Lyft Drivers
https://platform.stratascratch.com/coding/10016-churn-rate-of-lyft-drivers?code_type=1

Descritpion: Find the global churn rate of Lyft drivers across all years.
Output the rate as a ratio.

Using SQL:

select 
    count(end_date)/count(*)::float * 100 as churn_rate 
from 
    lyft_drivers

------------------------------------------------------
Question 10: Highest Total Miles (window function)
https://platform.stratascratch.com/coding/10169-highest-total-miles?code_type=1

Descritpion: You’re given a table of Uber rides that contains the mileage and the purpose for the business expense.  
You’re asked to find business purposes that generate the most miles driven for passengers that use Uber for their business transportation. 
Find the top 3 business purpose categories by total mileage.

Using SQL:

select 
    t.purpose, 
    all_miles
from (select 
            t.purpose,
            sum(t.miles) as all_miles,    
            rank() over ( order by sum(t.miles) desc)
from 
    my_uber_drives t
group by t.purpose) t

where rank <=3 





